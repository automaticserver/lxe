using namespace System.Management.Automation
using namespace System.Management.Automation.Language
Register-ArgumentCompleter -Native -CommandName 'prog' -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)
    $commandElements = $commandAst.CommandElements
    $command = @(
        'prog'
        for ($i = 1; $i -lt $commandElements.Count; $i++) {
            $element = $commandElements[$i]
            if ($element -isnot [StringConstantExpressionAst] -or
                $element.StringConstantType -ne [StringConstantType]::BareWord -or
                $element.Value.StartsWith('-')) {
                break
            }
            $element.Value
        }
    ) -join ';'
    $completions = @(switch ($command) {
        'prog' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('completion', 'completion', [CompletionResultType]::ParameterValue, 'Generate a completion script')
            [CompletionResult]::new('config', 'config', [CompletionResultType]::ParameterValue, 'Manage configuration options')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Help about any command')
            [CompletionResult]::new('version', 'version', [CompletionResultType]::ParameterValue, 'Print version information')
            break
        }
        'prog;completion' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('bash', 'bash', [CompletionResultType]::ParameterValue, 'Generates bash completion script')
            [CompletionResult]::new('powershell', 'powershell', [CompletionResultType]::ParameterValue, 'Generates powershell completion script')
            [CompletionResult]::new('zsh', 'zsh', [CompletionResultType]::ParameterValue, 'Generates zsh completion script')
            break
        }
        'prog;completion;bash' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'help for bash')
            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'help for bash')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
        'prog;completion;powershell' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'help for powershell')
            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'help for powershell')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
        'prog;completion;zsh' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'help for zsh')
            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'help for zsh')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
        'prog;config' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Display the currently loaded configuration in specified format')
            break
        }
        'prog;config;show' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
        'prog;help' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
        'prog;version' {
            [CompletionResult]::new('--abool', 'abool', [CompletionResultType]::ParameterName, 'A bool flag')
            [CompletionResult]::new('--abytes', 'abytes', [CompletionResultType]::ParameterName, 'A bytes base64 flag')
            [CompletionResult]::new('--aduration', 'aduration', [CompletionResultType]::ParameterName, 'A duration flag')
            [CompletionResult]::new('--afloat', 'afloat', [CompletionResultType]::ParameterName, 'A float flag. THIS IS A VIPER BUG! Gets transformed to a string!')
            [CompletionResult]::new('--anint', 'anint', [CompletionResultType]::ParameterName, 'An int flag')
            [CompletionResult]::new('--anip', 'anip', [CompletionResultType]::ParameterName, 'An IP flag')
            [CompletionResult]::new('--anipnet', 'anipnet', [CompletionResultType]::ParameterName, 'An IPNet flag')
            [CompletionResult]::new('--astringslice', 'astringslice', [CompletionResultType]::ParameterName, 'A string slice flag')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'Load configuration from this file. The path may be absolute or relative. Supported extensions: json, toml, yaml, yml, properties, props, prop, hcl, dotenv, env, ini')
            [CompletionResult]::new('--debug-address', 'debug-address', [CompletionResultType]::ParameterName, 'Listen address to use for the golang pprof server. Send USR2 signal to the process to toggle the server on and off.')
            [CompletionResult]::new('--debug-autostart', 'debug-autostart', [CompletionResultType]::ParameterName, 'Whether the golang pprof server is automatically started.')
            [CompletionResult]::new('--log-file-path', 'log-file-path', [CompletionResultType]::ParameterName, 'Path to log file. Only required if --log-target is set to file.')
            [CompletionResult]::new('--log-format', 'log-format', [CompletionResultType]::ParameterName, 'Define default log format, one of: json, keyvalue, pretty.')
            [CompletionResult]::new('--log-level', 'log-level', [CompletionResultType]::ParameterName, 'Define minimum log level, one of: panic, fatal, error, warning, info, debug, trace.')
            [CompletionResult]::new('--log-target', 'log-target', [CompletionResultType]::ParameterName, 'Define log output target, one of: stdout, stderr, file.')
            [CompletionResult]::new('--remote-first', 'remote-first', [CompletionResultType]::ParameterName, 'A flag which is in in a subtree')
            [CompletionResult]::new('--remote-second', 'remote-second', [CompletionResultType]::ParameterName, 'The other part of the subtree flag so we can see what this means')
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--short', 'short', [CompletionResultType]::ParameterName, 'A pretty normal short flag. Except this usage description is made exceptionally long so it should word-wrap in configuration files, depending on if they are told to do so. Do usage flags have an ending punctuation or not?')
            [CompletionResult]::new('--store-another-sub-level', 'store-another-sub-level', [CompletionResultType]::ParameterName, 'A flag with a second sublevel, sometimes with dashes')
            [CompletionResult]::new('-S', 'S', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('--store-dir', 'store-dir', [CompletionResultType]::ParameterName, 'A flag which has a dash and a subtree. The dash should is part of the main key, and not a delimititer for the subtree')
            [CompletionResult]::new('-L', 'L', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            [CompletionResult]::new('--store-log-level', 'store-log-level', [CompletionResultType]::ParameterName, 'The other subtree element has a dash as well')
            break
        }
    })
    $completions.Where{ $_.CompletionText -like "$wordToComplete*" } |
        Sort-Object -Property ListItemText
}